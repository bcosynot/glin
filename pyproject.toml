[project]
name = "seev"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "fastmcp>=2.12.4",
]

[project.scripts]
seev = "seev.mcp_app:run"

[dependency-groups]
dev = [
    "ruff>=0.13.2",
    "pytest>=8.3.0",
    "pytest-cov>=5.0.0",
    "mkdocs-material",
    "mkdocstrings[python]",
    "mike",
    "mkdocs-git-revision-date-localized-plugin",
]

[tool.pytest.ini_options]
addopts = "-q --cov=seev --cov-report=term-missing --cov-report=xml:coverage.xml"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]

[tool.ruff]
# Match the configured Python version
target-version = "py313"
# Keep lines readable while accommodating typical comments and URLs
line-length = 100
# Project source roots (ruff uses this to resolve imports and autofixes)
src = ["."]
# Avoid scanning lockfiles or other generated artifacts
extend-exclude = ["uv.lock"]

[tool.ruff.lint]
# A lean, common-sense rule set: pycodestyle (E/W), Pyflakes (F), isort (I),
# pyupgrade (UP), and some bugbear checks (B)
select = ["E", "W", "F", "I", "UP", "B"]
# Add ignores here if any rule is too noisy for this codebase
ignore = []
# Allow Ruff to fix everything it knows how to
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.isort]
# Treat this project as first-party for import sorting
known-first-party = ["seev"]
combine-as-imports = true

[tool.ruff.format]
# Enable Ruff's formatter with opinionated but widely-used defaults
quote-style = "double"
indent-style = "space"
line-ending = "auto"
# Format code blocks inside docstrings as well
docstring-code-format = true
